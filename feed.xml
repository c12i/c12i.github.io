<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.3">Jekyll</generator><link href="https://collinsmuriuki.xyz/feed.xml" rel="self" type="application/atom+xml" /><link href="https://collinsmuriuki.xyz/" rel="alternate" type="text/html" /><updated>2025-06-14T19:34:57+03:00</updated><id>https://collinsmuriuki.xyz/feed.xml</id><title type="html">Collins Muriuki</title><subtitle>Understanding the universe and explaining it to a three year old.</subtitle><entry><title type="html">Building bunge-bits, an AI-Powered Summary Pipeline for Kenyan Parliament</title><link href="https://collinsmuriuki.xyz/building-bunge-bits/" rel="alternate" type="text/html" title="Building bunge-bits, an AI-Powered Summary Pipeline for Kenyan Parliament" /><published>2025-06-12T19:00:00+03:00</published><updated>2025-06-12T19:00:00+03:00</updated><id>https://collinsmuriuki.xyz/building-bunge-bits</id><content type="html" xml:base="https://collinsmuriuki.xyz/building-bunge-bits/">&lt;h1 id=&quot;motivation&quot;&gt;Motivation&lt;/h1&gt;

&lt;p&gt;I built bunge-bits out of frustration. Kenya’s National Assembly and Senate regularly livestream their proceedings, but these sessions are long, often poorly indexed, and inaccessible to most people. The average citizen doesn’t have the time—or bandwidth—to sit through five-hour videos of parliamentary debates.&lt;/p&gt;

&lt;p&gt;At the same time, Kenya is experiencing a generational shift. Young people are increasingly vocal about governance, public spending, and corruption. I wanted to contribute something tangible to that movement—something that makes civic discussions more transparent, digestible, and shareable.&lt;/p&gt;

&lt;p&gt;bunge-bits is my attempt to bridge that gap: an AI-powered pipeline that listens to Parliament so citizens don’t have to, and summarizes the highlights in plain markdown.&lt;/p&gt;

&lt;h1 id=&quot;the-stack&quot;&gt;The Stack&lt;/h1&gt;

&lt;p&gt;This project leans heavily on modern AI tools and a reliable Rust backbone:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Rust&lt;/code&gt;: For performance, error handling, and concurrency.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yt-dlp&lt;/code&gt;: To fetch livestream recordings from YouTube.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ffmpeg&lt;/code&gt;: For slicing audio into manageable chunks.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenAI Whisper&lt;/code&gt;: To transcribe spoken audio to text.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GPT-4&lt;/code&gt;: To summarize transcripts into clear, structured markdown.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Postgres&lt;/code&gt;: For storing metadata and summaries.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cron jobs&lt;/code&gt;: For scheduling runs and cleaning up old artifacts.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here’s how data flows through the system:&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/bunge-bits-pipeline.png&quot; alt=&quot;bunge-bits Pipeline Diagram&quot; width=&quot;150&quot; /&gt;
&lt;/p&gt;

&lt;h1 id=&quot;engineering-challenges&quot;&gt;Engineering Challenges&lt;/h1&gt;

&lt;p&gt;Some parts of this were painful:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Whisper often mangled Kenyan names: “John Mbadi” became “John Birdy”, and it only got worse with native pronunciations.&lt;/li&gt;
  &lt;li&gt;Bad transcriptions created hallucinated summaries: GPT-4 would fill in gaps with confident nonsense.&lt;/li&gt;
  &lt;li&gt;OpenAI context limits: Long transcripts could easily exceed GPT’s token window, making summarization error-prone or impossible.&lt;/li&gt;
  &lt;li&gt;Multiple streams per day: My VPS filled up fast with raw audio and transcripts.&lt;/li&gt;
  &lt;li&gt;Chunk order and retries: Ensuring chunks were in sequence and retried correctly took careful design.&lt;/li&gt;
  &lt;li&gt;Summary formatting: I needed markdown output with clean headings, bullets, and time-stamped key moments.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;solutions-and-architecture-decisions&quot;&gt;Solutions and Architecture Decisions&lt;/h1&gt;

&lt;p&gt;To tackle these, I made a few key calls:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Context-aware summarization: I inject lists of Kenyan MPs, CSs, Senators, and known figures into the prompt so GPT-4 can correct misheard names with confidence.&lt;/li&gt;
  &lt;li&gt;System/user prompt separation: This helps enforce markdown formatting, avoid emojis, and ensure consistent structure.&lt;/li&gt;
  &lt;li&gt;Linear, contextual summarization pipeline: This was the biggest challenge. To avoid exceeding OpenAI’s context window, I chunk transcripts and summarize each piece separately, feeding each new summary back in as context for the next. The final output is then stitched together in a “combine” step. This closure-based approach let me scale summaries without blowing the token limit.&lt;/li&gt;
  &lt;li&gt;Batching via cron: The job runs every 12 hours, fetching and processing only new streams.&lt;/li&gt;
  &lt;li&gt;Separate cron for cleanup: A lightweight system cron wipes old audio/transcripts after processing to avoid disk bloat.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;whats-next&quot;&gt;What’s Next&lt;/h1&gt;

&lt;p&gt;There’s a lot more I want to do (in order of priority):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A public UI where users can browse summaries and filter by topic or MP.&lt;/li&gt;
  &lt;li&gt;Automatic timestamp injection for key moments (e.g. heated debates, bill passages, speaker interventions) to make summaries easier to navigate — this is a planned feature.&lt;/li&gt;
  &lt;li&gt;Real-time summarization as streams happen.&lt;/li&gt;
  &lt;li&gt;The repo is already open source, but I plan to apply for OpenAI credits, civic tech grants, or journalism fellowships to fund ongoing compute and infrastructure costs.&lt;/li&gt;
  &lt;li&gt;Eventually, I’d love to collaborate with civil society groups, media houses, or transparency orgs to expand its reach.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/c12i/bunge-bits&quot;&gt;View the code on GitHub&lt;/a&gt;&lt;/p&gt;</content><author><name>Collins Muriuki</name></author><category term="blog" /><category term="Rust" /><category term="AI" /><category term="CivicTech" /><category term="Kenya" /><category term="GPT-4" /><category term="Whisper" /><summary type="html">Motivation</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://collinsmuriuki.xyz/assets/images/bunge-bits.png" /><media:content medium="image" url="https://collinsmuriuki.xyz/assets/images/bunge-bits.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Programming in the Shadow of AI</title><link href="https://collinsmuriuki.xyz/programming-in-the-shadow-of-ai/" rel="alternate" type="text/html" title="Programming in the Shadow of AI" /><published>2024-09-03T03:00:00+03:00</published><updated>2024-09-03T03:00:00+03:00</updated><id>https://collinsmuriuki.xyz/programming-in-the-shadow-of-ai</id><content type="html" xml:base="https://collinsmuriuki.xyz/programming-in-the-shadow-of-ai/">&lt;p&gt;It’s 3 AM, and I’m staring at my screen, fingers hovering over the keyboard. The cursor blinks, mocking me. I should be coding, but instead, I’m frozen, paralyzed by a question that’s been gnawing at me for months:&lt;/p&gt;

&lt;p&gt;Am I even a real developer anymore?&lt;/p&gt;

&lt;p&gt;I’ve been using AI to help me code. A lot. At first, it felt like a secret weapon, a way to supercharge my productivity. But now? Now it feels like a crutch I can’t let go of. And it’s eating me alive.&lt;/p&gt;

&lt;h2 id=&quot;the-spiral&quot;&gt;The Spiral&lt;/h2&gt;

&lt;p&gt;Every time I fire up ChatGPT, Claude or let GitHub Copilot autocomplete my functions, a little voice in my head whispers: “Fraud.” It’s getting louder. I find myself second-guessing every line of code. Did I write this, or did AI? And if AI wrote it, what does that say about me?&lt;/p&gt;

&lt;p&gt;I used to pride myself on my problem-solving skills, on those eureka moments when a solution would suddenly click into place. Now? I’m not sure I remember the last time I had one of those moments without AI prompting.&lt;/p&gt;

&lt;h2 id=&quot;the-fear&quot;&gt;The Fear&lt;/h2&gt;

&lt;p&gt;It’s not just about feeling like a fraud. It’s the creeping dread that I’m making myself obsolete. Every day, these AI models get smarter, more capable. They’re already writing code faster and often cleaner than I can. How long until they don’t need me at all?&lt;/p&gt;

&lt;p&gt;I lie awake at night, imagining a future where algorithms have replaced us all. Where creativity and critical thinking are relics of the past, and human developers are nothing more than quaint curiosities.&lt;/p&gt;

&lt;h2 id=&quot;the-doubt&quot;&gt;The Doubt&lt;/h2&gt;

&lt;p&gt;But it’s more than just fear of obsolescence. It’s a deeper, more existential crisis. Am I losing myself? My ability to think critically, to come up with original ideas – are these muscles atrophying while I lean on AI?&lt;/p&gt;

&lt;p&gt;I catch myself reaching for AI assistance for even the simplest tasks now. It’s like I don’t trust my own brain anymore. And that terrifies me more than any job-stealing robot.&lt;/p&gt;

&lt;h2 id=&quot;the-turning-point&quot;&gt;The Turning Point&lt;/h2&gt;

&lt;p&gt;But here’s the thing. As I sit here, pouring my fears onto this digital page, I’m realizing something. These words? They’re mine. No AI prompted them. No language model crafted them. This is me, raw and unfiltered, grappling with my fears.&lt;/p&gt;

&lt;p&gt;And maybe that’s the key.&lt;/p&gt;

&lt;h2 id=&quot;a-new-perspective&quot;&gt;A New Perspective&lt;/h2&gt;

&lt;p&gt;AI isn’t going away. It’s part of our world now, part of our profession. But it doesn’t have to be the enemy. Maybe, just maybe, it can be a partner.&lt;/p&gt;

&lt;p&gt;What if, instead of fearing AI, I embrace it as a tool to handle the mundane, freeing me to focus on the truly human aspects of development? The big-picture thinking, the creative problem-solving, the ability to understand and empathize with users in a way no AI can.&lt;/p&gt;

&lt;h2 id=&quot;moving-forward&quot;&gt;Moving Forward&lt;/h2&gt;

&lt;p&gt;I’m not going to lie and say all my fears have magically disappeared. They haven’t. But I’m starting to see a path forward:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Use AI, but question it. Challenge its outputs, understand the ‘why’ behind its suggestions.&lt;/li&gt;
  &lt;li&gt;Focus on developing skills AI can’t replicate – soft skills, architectural thinking, understanding business needs.&lt;/li&gt;
  &lt;li&gt;Embrace the role of the “AI whisperer” – learning to craft the perfect prompts, to guide AI tools towards truly innovative solutions.&lt;/li&gt;
  &lt;li&gt;Never stop learning. The more I know, the better I can harness AI’s power without being consumed by it.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-human-element&quot;&gt;The Human Element&lt;/h2&gt;

&lt;p&gt;At the end of the day, there’s one thing AI can never replicate: my unique human experience. My quirks, my intuitions, my ability to connect seemingly unrelated dots – these are what make me valuable as a developer and as a human being.&lt;/p&gt;

&lt;p&gt;So yes, I’ll continue to use AI. But I’ll do it on my terms, as a tool to amplify my human creativity and insight, not replace it.&lt;/p&gt;

&lt;p&gt;I am not obsolete. I am evolving. And that’s a pretty exciting thought to hold onto as I finally, finally drift off to sleep.&lt;/p&gt;</content><author><name>Collins Muriuki</name></author><category term="blog" /><category term="AI" /><category term="programming" /><category term="developer-experience" /><category term="machine-learning" /><category term="career" /><summary type="html">It’s 3 AM, and I’m staring at my screen, fingers hovering over the keyboard. The cursor blinks, mocking me. I should be coding, but instead, I’m frozen, paralyzed by a question that’s been gnawing at me for months:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://collinsmuriuki.xyz/assets/images/developer.png" /><media:content medium="image" url="https://collinsmuriuki.xyz/assets/images/developer.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The Quest for Compile-Time String Formatting in Rust</title><link href="https://collinsmuriuki.xyz/compile-time-string-formatting/" rel="alternate" type="text/html" title="The Quest for Compile-Time String Formatting in Rust" /><published>2024-09-01T02:30:00+03:00</published><updated>2024-09-01T02:30:00+03:00</updated><id>https://collinsmuriuki.xyz/compile-time-string-formatting</id><content type="html" xml:base="https://collinsmuriuki.xyz/compile-time-string-formatting/">&lt;p&gt;Imagine you’re deep in Rust code, building a CLI tool that’s going to make waves in the developer community. You’ve got your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clap&lt;/code&gt; derive macros set up perfectly, ready to handle command parsing with ease. But then you hit a snag. You need to concatenate some constants for your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;about&lt;/code&gt; attribute to show compatibility information, and Rust isn’t playing ball.&lt;/p&gt;

&lt;p&gt;“Hmm, compile-time string formatting is more complicated than I expected,” you think, furrowing your brow at the error message on your screen.&lt;/p&gt;

&lt;p&gt;Welcome to Rust, where safety and zero-cost abstractions reign supreme, but sometimes the simplest tasks can become unexpected challenges.&lt;/p&gt;

&lt;h2 id=&quot;the-problem-rusts-compile-time-conundrum&quot;&gt;The Problem: Rust’s Compile-Time Conundrum&lt;/h2&gt;

&lt;p&gt;Why can’t Rust handle simple string concatenation at compile time? Well, it’s not as straightforward as you might think.&lt;/p&gt;

&lt;p&gt;Let’s look at an example that seems like it should work, but doesn’t:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;clap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TOOL_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SuperTool&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COMPATIBLE_CRATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AwesomeDependency&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COMPATIBLE_VERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.2.3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// This doesn't work!&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ABOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;format!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;{} - Compatible with {} version {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TOOL_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COMPATIBLE_CRATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COMPATIBLE_VERSION&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[derive(Parser,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Debug)]&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[command(author&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Alice&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;version,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;about&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;ABOUT)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cli&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// CLI arguments would go here&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cli&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{:?}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Try to compile this, and Rust responds with an error:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants
 --&amp;gt; src/main.rs:8:21
  |
8 | const ABOUT: String = format!(
  |                       ^^^^^^ ...

error: aborting due to previous error
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;format!&lt;/code&gt; macro, usually so helpful for string formatting, suddenly becomes unavailable in the compile-time context.&lt;/p&gt;

&lt;p&gt;Rust’s const evaluation capabilities, while continuously improving, still have limitations. The language designers have prioritized other features, leaving compile-time string formatting as a challenge to overcome.&lt;/p&gt;

&lt;h2 id=&quot;the-solution-leveraging-crates&quot;&gt;The Solution: Leveraging Crates&lt;/h2&gt;

&lt;p&gt;Fortunately, the Rust ecosystem provides solutions. One such solution is the &lt;a href=&quot;https://docs.rs/const_format/latest/const_format/index.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const_format&lt;/code&gt;&lt;/a&gt; crate, which allows for compile-time string formatting.&lt;/p&gt;

&lt;p&gt;With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const_format&lt;/code&gt;, you can write:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;const_format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;formatcp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TOOL_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SuperTool&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COMPATIBLE_CRATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AwesomeDependency&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COMPATIBLE_VERSION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.2.3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ABOUT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;formatcp!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;{} - Compatible with {} version {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;TOOL_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COMPATIBLE_CRATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;COMPATIBLE_VERSION&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This approach gives us the compile-time string formatting we need.&lt;/p&gt;

&lt;h2 id=&quot;an-alternative-build-scripts&quot;&gt;An Alternative: Build Scripts&lt;/h2&gt;

&lt;p&gt;There’s another way to achieve compile-time string formatting without additional crates: build scripts and environment variables.&lt;/p&gt;

&lt;p&gt;By using a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.rs&lt;/code&gt; file, we can generate our formatted strings at compile time and pass them to our main code as environment variables. Here’s how:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.rs&lt;/code&gt; file in your project root:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tool_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;SuperTool&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compatible_crate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;AwesomeDependency&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compatible_version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.2.3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;about&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;format!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;{} - Compatible with {} version {}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tool_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compatible_crate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compatible_version&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cargo:rustc-env=ABOUT={}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;about&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;In your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main.rs&lt;/code&gt;, use the environment variable:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;clap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[derive(Parser,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;Debug)]&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[command(author&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Alice&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;version,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;about&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ABOUT&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;))]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cli&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// CLI arguments would go here&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Cli&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{:?}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This method allows us to perform the string formatting during the build process and inject the result into our main code.&lt;/p&gt;

&lt;h2 id=&quot;lessons-learned&quot;&gt;Lessons Learned&lt;/h2&gt;

&lt;p&gt;This journey through compile-time string formatting in Rust teaches us a few valuable lessons:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Rust prioritizes safety and performance, sometimes at the cost of convenience.&lt;/li&gt;
  &lt;li&gt;The Rust ecosystem often provides solutions for language limitations.&lt;/li&gt;
  &lt;li&gt;Build scripts are powerful tools that can help overcome certain restrictions.&lt;/li&gt;
  &lt;li&gt;Sometimes, the simplest solutions (like using environment variables) can solve complex problems.&lt;/li&gt;
  &lt;li&gt;With some creativity, we can usually find a way around language limitations.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;While Rust may not support compile-time formatting out of the box, we have multiple ways to achieve our goals. Whether it’s through community-created crates or clever use of build scripts, Rust developers always find a way forward.&lt;/p&gt;</content><author><name>Collins Muriuki</name></author><category term="blog" /><category term="rust" /><category term="programming" /><category term="cli" /><category term="compile-time" /><category term="string-formatting" /><summary type="html">Imagine you’re deep in Rust code, building a CLI tool that’s going to make waves in the developer community. You’ve got your clap derive macros set up perfectly, ready to handle command parsing with ease. But then you hit a snag. You need to concatenate some constants for your about attribute to show compatibility information, and Rust isn’t playing ball.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://collinsmuriuki.xyz/assets/images/rust-crab.png" /><media:content medium="image" url="https://collinsmuriuki.xyz/assets/images/rust-crab.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Canonical’s Hiring Maze: Adventure, Nightmare, or Endless Job Fair?</title><link href="https://collinsmuriuki.xyz/canonicals-hiring-maze/" rel="alternate" type="text/html" title="Canonical’s Hiring Maze: Adventure, Nightmare, or Endless Job Fair?" /><published>2024-08-30T09:45:00+03:00</published><updated>2024-08-30T09:45:00+03:00</updated><id>https://collinsmuriuki.xyz/canonicals-hiring-maze</id><content type="html" xml:base="https://collinsmuriuki.xyz/canonicals-hiring-maze/">&lt;p&gt;Ever thought about working for the company behind Ubuntu? Well, buckle up, because Canonical’s hiring process is quite the ride. And have you noticed how they always seem to have a ton of open positions? Let’s dive into what you might expect if you decide to throw your hat in the ring and explore why their job board looks like a never-ending buffet of opportunities.&lt;/p&gt;

&lt;h2 id=&quot;the-gauntlet-begins&quot;&gt;The Gauntlet Begins&lt;/h2&gt;

&lt;p&gt;First things first: Canonical doesn’t do things by halves. Their hiring process is like the tech world’s version of an ultra-marathon. We’re talking about a journey that can last anywhere from 2 to 5 months. Yep, you read that right – months, not weeks &lt;a href=&quot;https://www.glassdoor.com/Interview/Canonical-Interview-Questions-E230560.htm&quot;&gt;[1]&lt;/a&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=36667863&quot;&gt;[6]&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s a taste of what you might encounter:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A written essay (think high school flashbacks)&lt;/li&gt;
  &lt;li&gt;Personality tests (because why not?)&lt;/li&gt;
  &lt;li&gt;Intelligence tests (flex those brain muscles!)&lt;/li&gt;
  &lt;li&gt;Multiple interviews (like, a lot of them – some folks report up to 15!)&lt;/li&gt;
  &lt;li&gt;Technical assessments (gotta prove those coding chops)&lt;/li&gt;
  &lt;li&gt;Presentations (time to dust off those public speaking skills)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Multiple applicants have reported going through “months of tests, interviews”, with some even making it all the way to an interview with Mark Shuttleworth himself. One HackerNews user described the process as “relatively lengthy,” noting that by the time they reached the offer stage, they were already interviewing with other companies &lt;a href=&quot;https://news.ycombinator.com/item?id=36667863&quot;&gt;[6]&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-good-the-bad-and-the-high-school-grades&quot;&gt;The Good, The Bad, and The… High School Grades?&lt;/h2&gt;

&lt;p&gt;Now, let’s talk about the elephant in the room – or should I say, the penguin? 🐧 Canonical seems to have a peculiar fascination with your academic past. And I’m not just talking about your university days. Nope, they want to know about your high school glory days too &lt;a href=&quot;https://www.reddit.com/r/linux/comments/thsrcp/this_was_the_first_stage_of_the_interview_process/&quot;&gt;[2]&lt;/a&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=#36667863&quot;&gt;[6]&lt;/a&gt;.
Picture this: You’re a seasoned dev with years of experience under your belt, and you’re asked about your high school math ranking. It’s like applying for a F1 race and being quizzed about your first bicycle. As one HackerNews commenter put it, “…the interview only really focused on what I had done in high school. I graduated 36 years ago - I just don’t see the relevance…” &lt;a href=&quot;https://news.ycombinator.com/item?id=36667863&quot;&gt;[6]&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-mixed-bag-of-experiences&quot;&gt;The Mixed Bag of Experiences&lt;/h2&gt;

&lt;p&gt;Some folks actually enjoy this process. They say it gives them a chance to really show off their skills and get to know the company. Others… well, let’s just say they’re less enthusiastic.&lt;/p&gt;

&lt;p&gt;On the plus side, you might get to chat with some cool people from different departments and countries. On the downside, you might feel like you’re stuck in an endless loop of interviews and tests &lt;a href=&quot;https://www.glassdoor.com/Interview/Canonical-Interview-Questions-E230560.htm&quot;&gt;[3]&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-compensation-conundrum&quot;&gt;The Compensation Conundrum&lt;/h2&gt;

&lt;p&gt;After all this, you’d expect a pot of gold at the end of the rainbow, right? Well, according to some reviews, Canonical’s compensation isn’t always competitive. Some candidates have reported being offered contractor positions with limited benefits &lt;a href=&quot;https://www.glassdoor.com/Interview/Canonical-Interview-Questions-E230560.htm&quot;&gt;[4]&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-perpetual-job-fair-why-so-many-open-roles&quot;&gt;The Perpetual Job Fair: Why So Many Open Roles?&lt;/h2&gt;

&lt;p&gt;Now, here’s something that might make you scratch your head: Canonical always seems to have a ton of open positions. It’s like they’re hosting a never-ending job fair. But why? 🤔&lt;/p&gt;

&lt;p&gt;There are a few theories floating around:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The Marathon Effect&lt;/strong&gt;: Remember that ultra-marathon hiring process we talked about? Well, it turns out that when you take 2-5 months to hire someone, positions tend to stay open for a while. It’s simple math – the longer the process, the more open roles you’ll see at any given time &lt;a href=&quot;https://www.glassdoor.com/Interview/Canonical-Interview-Questions-E230560.htm&quot;&gt;[1]&lt;/a&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=36667863&quot;&gt;[6]&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The Goldilocks Syndrome&lt;/strong&gt;: Some folks suggest that Canonical might be looking for candidates that are juuuust right. With their extensive testing and interview process, they might be setting the bar sky-high, making it tough to find the perfect fit &lt;a href=&quot;https://www.reddit.com/r/linux/comments/thsrcp/this_was_the_first_stage_of_the_interview_process/&quot;&gt;[2]&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The Revolving Door Theory&lt;/strong&gt;: A few reviews hint at a high turnover rate. If people are leaving as fast as they’re being hired, that would explain the constant stream of job openings &lt;a href=&quot;https://www.glassdoor.com/Interview/Canonical-Interview-Questions-E230560.htm&quot;&gt;[3]&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The Growth Spurt Hypothesis&lt;/strong&gt;: On a more positive note, maybe Canonical is in a phase of rapid expansion. All those open roles could be a sign of a company that’s growing faster than it can hire &lt;a href=&quot;https://www.glassdoor.com/Interview/Canonical-Interview-Questions-E230560.htm&quot;&gt;[4]&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;The Fishing Expedition&lt;/strong&gt;: Here’s a spicy theory – some suggest that not all these jobs are real. There’s speculation that Canonical might be using job postings to gather industry insights or ideas. It’s a controversial idea, and definitely not confirmed, but it’s out there &lt;a href=&quot;https://www.glassdoor.com/Interview/Canonical-Interview-Questions-E230560.htm&quot;&gt;[5]&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now, it’s important to note that these are theories based on various reviews and discussions. Canonical itself hasn’t officially commented on this phenomenon. But it does make you wonder, doesn’t it?&lt;/p&gt;

&lt;h2 id=&quot;the-million-dollar-question&quot;&gt;The Million-Dollar Question&lt;/h2&gt;

&lt;p&gt;So, here’s the big question: Should you apply for a role at Canonical?&lt;/p&gt;

&lt;p&gt;Well, that depends. Are you up for an adventure? Do you have a few months to spare? Are you cool with digging up your old report cards? If you answered yes to all of these, then hey, why not give it a shot?&lt;/p&gt;

&lt;p&gt;But if you’re looking for a quick and straightforward hiring process, or if you believe your recent work speaks louder than your high school grades, you might want to think twice.&lt;/p&gt;

&lt;p&gt;At the end of the day, it’s all about what you’re comfortable with. Canonical’s process is unique, that’s for sure. Whether it’s uniquely good or uniquely frustrating – well, that’s for you to decide.&lt;/p&gt;

&lt;p&gt;What do you think? Would you be willing to go through Canonical’s hiring maze? Or would you rather stick to more conventional job applications? And what’s your take on their always-full job board? Drop your thoughts in the comments below!&lt;/p&gt;</content><author><name>Collins Muriuki</name></author><category term="blog" /><category term="tech" /><category term="hiring" /><category term="canonical" /><category term="ubuntu" /><category term="software-engineering" /><summary type="html">Ever thought about working for the company behind Ubuntu? Well, buckle up, because Canonical’s hiring process is quite the ride. And have you noticed how they always seem to have a ton of open positions? Let’s dive into what you might expect if you decide to throw your hat in the ring and explore why their job board looks like a never-ending buffet of opportunities.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://collinsmuriuki.xyz/assets/images/canonical-ubuntu-logo.jpeg" /><media:content medium="image" url="https://collinsmuriuki.xyz/assets/images/canonical-ubuntu-logo.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Exploring the Differences Between WebRTC Data Channels and WebSockets</title><link href="https://collinsmuriuki.xyz/webrtc-data-channels-vs-websockets/" rel="alternate" type="text/html" title="Exploring the Differences Between WebRTC Data Channels and WebSockets" /><published>2024-03-02T08:31:00+03:00</published><updated>2024-03-02T08:31:00+03:00</updated><id>https://collinsmuriuki.xyz/webrtc-data-channels-vs-websockets</id><content type="html" xml:base="https://collinsmuriuki.xyz/webrtc-data-channels-vs-websockets/">&lt;h3 id=&quot;introduction&quot;&gt;Introduction&lt;/h3&gt;
&lt;p&gt;WebRTC (Web Real-Time Communication) &lt;a href=&quot;https://web.dev/articles/webrtc-basics#rtcdatachannel_api&quot;&gt;data channels&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/WebSocket&quot;&gt;WebSockets&lt;/a&gt; are both powerful technologies that enable real-time communication between clients and servers (or other clients) to enable transfer of arbitrary data. However, they have distinct characteristics and use cases. In this blog post, we’ll delve into the key differences between WebRTC data channels and WebSockets, providing code snippets for better understanding.&lt;/p&gt;

&lt;h3 id=&quot;webrtc-data-channels&quot;&gt;WebRTC Data Channels&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Purpose:&lt;/strong&gt;
WebRTC data channels are specifically designed for peer-to-peer communication between browsers. They are a part of the larger WebRTC framework, primarily used for real-time data exchange.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Peer-to-Peer Nature:&lt;/strong&gt;
WebRTC data channels establish a direct connection between peers, allowing for efficient and low-latency communication without the need for a centralized server.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Browser Support:&lt;/strong&gt;
WebRTC data channels are supported by modern browsers, making them suitable for applications that require real-time communication, such as remote desktop apps, online gaming, real time text chats, collaborative editing or file transfer.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Creating a WebRTC Data Channel:&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Creating a WebRTC connection&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;peerConnection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;RTCPeerConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Creating a data channel&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dataChannel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;peerConnection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createDataChannel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;myDataChannel&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Event handler for data channel messages&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;dataChannel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onmessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Received message:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Event handler for data channel open&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;dataChannel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onopen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Data channel opened!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Event handler for data channel close&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;dataChannel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Data channel closed!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;websockets&quot;&gt;WebSockets&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Purpose:&lt;/strong&gt;
WebSockets are a general-purpose communication protocol that provides full-duplex communication channels over a single, long-lived connection. They can be used for various real-time applications beyond browsers.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Centralized Communication:&lt;/strong&gt;
Unlike WebRTC data channels, WebSockets typically rely on a centralized server to facilitate communication between clients. The server acts as an intermediary for message exchange.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Wide Range of Applications:&lt;/strong&gt;
WebSockets are widely used in applications like chat applications, financial trading platforms, live sports updates, and more. They provide a reliable and efficient means of bidirectional communication.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Establishing a WebSocket Connection in the browser&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Creating a WebSocket connection&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;WebSocket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;wss://example.com/socket&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Event handler for connection open&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onopen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;WebSocket connection opened!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Event handler for received messages&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onmessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Received message:&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Event handler for connection close&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onclose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;WebSocket connection closed!&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;choosing-between-websocket-and-webrtc-data-channels&quot;&gt;Choosing Between WebSocket and WebRTC Data Channels&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Choose WebSocket When:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Centralized Communication:&lt;/strong&gt; If your application involves a centralized server that facilitates communication between clients, WebSocket is a suitable choice. Examples include chat applications, real-time notifications, or online gaming where a central server manages interactions.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Broader Browser Support:&lt;/strong&gt; WebSocket enjoys broader browser support, making it a more compatible choice for a wider range of scenarios, especially when cross-browser compatibility is crucial.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Simplicity and Ease of Implementation:&lt;/strong&gt; WebSocket provides a straightforward API and is easier to implement for applications that do not require direct peer-to-peer communication.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Choose WebRTC Data Channels When:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Peer-to-Peer Communication:&lt;/strong&gt; If your application requires direct communication between browsers without relying on a central server, WebRTC Data Channel is ideal. This is particularly useful for scenarios like video conferencing, collaborative tools, or file sharing where low-latency, peer-to-peer communication is crucial.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Real-Time Media Streaming:&lt;/strong&gt; When dealing with real-time media streams, such as audio or video, WebRTC is well-suited. The integrated support for media streams, along with the Data Channel for additional data transfer, makes it a comprehensive choice for applications that involve both.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Enhanced Privacy and Security:&lt;/strong&gt; WebRTC inherently supports end-to-end encryption, providing an added layer of security for peer-to-peer communication. If privacy and security are paramount, especially in applications like video conferencing, WebRTC is a preferred choice.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Considerations for Both:&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Network Topology:&lt;/strong&gt; Consider the network topology of your application. If a centralized server is already a fundamental part of your architecture, WebSocket may align better. For decentralized or peer-centric architectures, WebRTC Data Channel is more suitable.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Complexity and Development Time:&lt;/strong&gt; WebSocket might be a quicker and simpler option for straightforward applications, while WebRTC can offer more advanced features but may require additional development effort, especially when dealing with complex scenarios like &lt;a href=&quot;https://en.wikipedia.org/wiki/NAT_traversal&quot;&gt;NAT traversal&lt;/a&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Scalability:&lt;/strong&gt; WebSocket can be easier to scale since the central server can manage communication. WebRTC, being peer-to-peer, may require additional considerations for scaling, especially in large applications.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ultimately, the choice between WebSocket and WebRTC Data Channel depends on the specific requirements and architecture of your application. Evaluate factors such as communication model, latency needs, privacy concerns, and development complexity to make an informed decision.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;In summary, WebRTC data channels are ideal for peer-to-peer communication within browsers, while WebSockets offer a more general-purpose solution for real-time communication with the help of a centralized server. The choice between them depends on the specific requirements and use cases of your application. Understanding their differences will empower you to make informed decisions when implementing real-time communication features.&lt;/p&gt;</content><author><name>collinsmuriuki</name></author><category term="blog" /><category term="javascript" /><category term="browsers" /><category term="webrtc" /><category term="websockets" /><summary type="html">Introduction WebRTC (Web Real-Time Communication) data channels and WebSockets are both powerful technologies that enable real-time communication between clients and servers (or other clients) to enable transfer of arbitrary data. However, they have distinct characteristics and use cases. In this blog post, we’ll delve into the key differences between WebRTC data channels and WebSockets, providing code snippets for better understanding.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://collinsmuriuki.xyz/assets/images/string-telephone-ai-generated.jpeg" /><media:content medium="image" url="https://collinsmuriuki.xyz/assets/images/string-telephone-ai-generated.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The Art of Avoiding Online Arguments</title><link href="https://collinsmuriuki.xyz/the-art-of-avoiding-online-arguments/" rel="alternate" type="text/html" title="The Art of Avoiding Online Arguments" /><published>2023-11-30T08:31:00+03:00</published><updated>2023-11-30T08:31:00+03:00</updated><id>https://collinsmuriuki.xyz/the-art-of-avoiding-online-arguments</id><content type="html" xml:base="https://collinsmuriuki.xyz/the-art-of-avoiding-online-arguments/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In an age where the internet connects us more than ever, the temptation to engage in debates with strangers online is ever-present. Social media platforms, forums, and comment sections provide ample opportunities for discussions, but they can also be breeding grounds for heated arguments. While healthy debates can foster learning and understanding, arguing with strangers online often leads to unnecessary stress, frustration, and even hostility.&lt;/p&gt;

&lt;p&gt;I understand the struggle all too well. I’ve found myself grappling with the urge to respond when encountering what seems to be a particularly uninformed or “dumb” take on a given topic, especially on platforms like X (formerly Twitter). In this blog post, we’ll explore why it’s wise to avoid getting entangled in online disputes, especially when it comes to topics you might be misinformed about, and how doing so can contribute to a more positive online experience.&lt;/p&gt;

&lt;h3 id=&quot;differing-perspectives&quot;&gt;Differing Perspectives&lt;/h3&gt;

&lt;p&gt;One of the primary reasons to steer clear of online arguments is the vast diversity of perspectives on the internet. People from various backgrounds, cultures, and experiences come together, each bringing their own unique viewpoint. Engaging in a debate with a stranger means navigating through a complex web of opinions, making it challenging to find common ground. Instead of fostering understanding, such encounters may result in frustration and further division.&lt;/p&gt;

&lt;h3 id=&quot;limited-context&quot;&gt;Limited Context&lt;/h3&gt;

&lt;p&gt;Online communication often lacks the nuance of face-to-face interactions. Text-based conversations can be easily misinterpreted, leading to misunderstandings and unnecessary conflicts. Without the ability to convey tone, body language, and facial expressions, arguments may escalate due to miscommunication. Choosing to avoid online arguments can help prevent unnecessary conflicts arising from the limitations of digital communication.&lt;/p&gt;

&lt;h3 id=&quot;emotional-toll&quot;&gt;Emotional Toll&lt;/h3&gt;

&lt;p&gt;Arguing with strangers online can take a toll on your emotional well-being. The anonymity provided by the internet may embolden individuals to express opinions more aggressively than they would in person. This lack of accountability can result in hurtful comments, personal attacks, and an overall negative emotional experience. Prioritizing your mental health by avoiding unnecessary online conflicts is essential in maintaining a positive digital presence.&lt;/p&gt;

&lt;h3 id=&quot;unproductive-energy&quot;&gt;Unproductive Energy&lt;/h3&gt;

&lt;p&gt;Engaging in online arguments seldom leads to meaningful resolutions. Many discussions devolve into a cycle of repetitive arguments with no clear winner. The time and energy spent on such debates could be better utilized in more productive ways, such as learning from diverse perspectives, sharing constructive information, or participating in positive online communities.&lt;/p&gt;

&lt;h3 id=&quot;avoiding-arguments-about-misinformed-topics&quot;&gt;Avoiding Arguments About Misinformed Topics&lt;/h3&gt;

&lt;p&gt;Arguing about topics you are clearly misinformed about can be detrimental to both your credibility and the overall quality of the discussion. Before engaging in debates, it’s crucial to ensure that you have a solid understanding of the subject matter. If you lack knowledge on a particular topic, consider taking the time to research and educate yourself before participating in discussions. This approach not only enhances the quality of your contributions but also prevents the spread of misinformation&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Choosing to avoid arguments with strangers online, especially on topics you are misinformed about, is a wise decision. Embracing diverse perspectives, acknowledging the limitations of digital communication, safeguarding your emotional well-being, and redirecting your energy towards positive interactions are key steps in cultivating a harmonious online experience. Remember, fostering understanding and empathy, coupled with informed discussions, can go a long way in creating a more inclusive and supportive digital environment for everyone.&lt;/p&gt;</content><author><name>collinsmuriuki</name></author><category term="blog" /><category term="the internet" /><summary type="html">Introduction</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://collinsmuriuki.xyz/assets/images/keyboard-warrior.webp" /><media:content medium="image" url="https://collinsmuriuki.xyz/assets/images/keyboard-warrior.webp" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Living Fully: Oddisee’s ‘Own Appeal’ and Embracing Life’s Brief Brilliance</title><link href="https://collinsmuriuki.xyz/i-never-asked-to-be-born-and-deaths-no-question/" rel="alternate" type="text/html" title="Living Fully: Oddisee’s ‘Own Appeal’ and Embracing Life’s Brief Brilliance" /><published>2022-05-19T08:31:00+03:00</published><updated>2022-05-19T08:31:00+03:00</updated><id>https://collinsmuriuki.xyz/i-never-asked-to-be-born-and-deaths-no-question</id><content type="html" xml:base="https://collinsmuriuki.xyz/i-never-asked-to-be-born-and-deaths-no-question/">&lt;p&gt;Oddisee, a Sudanese-American producer/MC from Washington D.C, has consistently been a favorite rapper/producer of mine over the years, and “Own Appeal” is undeniably one of his standout works. Lately, I’ve found myself dwelling on the opening line, “I never asked to be born, and death’s no question.” Today, I finally put pen to paper to share my thoughts on what this line means to me.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;310&quot; src=&quot;https://www.youtube.com/embed/E2Snh2NZHhk&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;the-unasked-query-of-existence&quot;&gt;The Unasked Query of Existence&lt;/h3&gt;

&lt;p&gt;The words resonate deeply - “I never asked to be born.” This raw expression encapsulates the unasked nature of our existence, a sentiment many grapple with at some point.&lt;/p&gt;

&lt;p&gt;Oddisee’s declaration encapsulates the paradox of choice coloring our journey. Reflecting on life’s myriad choices against the backdrop of our lack of agency in our own birth, I recognize that while I navigate decisions, the fundamental choice – the decision to exist – wasn’t mine to make. Our parents, as the primary architects of our existence, made the profound decision to bring life into being.&lt;/p&gt;

&lt;p&gt;This acknowledgment doesn’t diminish the importance of the choices we make in our lives or the agency we exercise in navigating our individual paths. Instead, it highlights the inherent complexity of existence, wherein the initial decision to enter this world was made on our behalf by those who came before us.&lt;/p&gt;

&lt;p&gt;Considering this perspective invites a deeper understanding of the interconnectedness of our lives and the influence our parents have on our existence. It sparks contemplation about the circumstances and factors beyond our control that shape our journey, laying the foundation for the myriad choices we make as we navigate the complexities of life.&lt;/p&gt;

&lt;h3 id=&quot;deaths-unavoidable-certainty&quot;&gt;Death’s Unavoidable Certainty&lt;/h3&gt;

&lt;p&gt;The latter half, “death’s no question,” unfolds as a poignant acknowledgment of our mortality. Oddisee lays it bare, prompting a confrontation with the inevitability of death. It’s not foreboding but sparks a profound reflection on how I approach life, knowing its finite nature defines our shared human experience.&lt;/p&gt;

&lt;h3 id=&quot;crafting-meaning-through-personal-reflection&quot;&gt;Crafting Meaning Through Personal Reflection&lt;/h3&gt;

&lt;p&gt;Oddisee’s words become a soundtrack to my contemplation. How do I navigate this uncharted territory of existence? Finding solace in unique coping mechanisms, be it delving into philosophy, spirituality, or the introspective journey of self-discovery, I seek to create meaning in relationships, cherish experiences, contribute to the world and to live a life of purpose and fulfillment.&lt;/p&gt;

&lt;p&gt;Our time here is a precious commodity, and should not to be taken for granted.&lt;/p&gt;

&lt;h3 id=&quot;a-personal-odyssey-with-own-appeal&quot;&gt;A Personal Odyssey with “Own Appeal”&lt;/h3&gt;

&lt;p&gt;Oddisee’s “Own Appeal” transcends a mere rap track; it mirrors my musings on existence. “I never asked to be born, and death’s no question” catalyzes a personal odyssey, prompting me to navigate the nuances of my own narrative. Embracing life’s uncharted and inevitable aspects, I resonate with Oddisee’s profound exploration of existence through this singular line.&lt;/p&gt;</content><author><name>collinsmuriuki</name></author><category term="blog" /><category term="reflection" /><category term="life" /><summary type="html">Oddisee, a Sudanese-American producer/MC from Washington D.C, has consistently been a favorite rapper/producer of mine over the years, and “Own Appeal” is undeniably one of his standout works. Lately, I’ve found myself dwelling on the opening line, “I never asked to be born, and death’s no question.” Today, I finally put pen to paper to share my thoughts on what this line means to me.</summary></entry><entry><title type="html">Building a Web Assembly powered password generator</title><link href="https://collinsmuriuki.xyz/wasm-tutorial/" rel="alternate" type="text/html" title="Building a Web Assembly powered password generator" /><published>2020-10-24T22:44:00+03:00</published><updated>2020-10-24T22:44:00+03:00</updated><id>https://collinsmuriuki.xyz/wasm-tutorial</id><content type="html" xml:base="https://collinsmuriuki.xyz/wasm-tutorial/">&lt;h1 id=&quot;building-a-web-assembly-powered-password-generator-with-rust-and-react&quot;&gt;Building a Web Assembly-powered Password Generator with Rust and React&lt;/h1&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this tutorial, we will explore the fascinating intersection of Rust, Web Assembly (Wasm), and React by building a simple password generator. We’ll leverage the speed and performance benefits of Rust, compile it into Wasm, and seamlessly integrate it into a React application. By the end of this project, you’ll have a clear understanding of how these technologies work together.&lt;/p&gt;

&lt;h2 id=&quot;why-rust-and-web-assembly&quot;&gt;Why Rust and Web Assembly?&lt;/h2&gt;

&lt;p&gt;Web Assembly is a low-level virtual machine that allows executing code at near-native speeds within web browsers. Rust, known for its speed and memory safety, is an ideal language for Wasm. Unlike high-level languages like JavaScript, Rust provides developers with low-level control and reliable performance, making it an excellent choice for Wasm.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;Before we dive into the project, ensure you have the following tools and knowledge:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rust and Cargo: Install them using &lt;a href=&quot;https://www.rust-lang.org/tools/install&quot;&gt;this link&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;wasm-pack: A tool for building and working with Rust-generated Web Assembly. Install it &lt;a href=&quot;https://rustwasm.github.io/wasm-pack/installer/&quot;&gt;here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Node.js: Required for React development. Install it from &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;nodejs.org&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Basic knowledge of Rust and JavaScript/React.js.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;initializing-the-rust-project&quot;&gt;Initializing the Rust Project&lt;/h2&gt;

&lt;p&gt;Let’s start by creating a new Rust Web Assembly project using the following command:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wasm-pack new wasm_pass
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This command generates a Rust library crate with Web Assembly support. The crucial files are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cargo.toml&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/lib.rs&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/utils.rs&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;dissecting-the-boilerplate&quot;&gt;Dissecting the Boilerplate&lt;/h2&gt;

&lt;p&gt;Explore the generated project structure:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wasm_pass/
├── Cargo.toml
├── LICENSE_APACHE
├── LICENSE_MIT
├── README.md
└── src
    ├── lib.rs
    └── utils.rs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Cargo.toml&lt;/strong&gt;: Contains project dependencies and metadata.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;lib.rs&lt;/strong&gt;: The root of the crate, compiled into Web Assembly.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;utils.rs&lt;/strong&gt;: Includes debugging utilities (not used in this project).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;initial-build&quot;&gt;Initial Build&lt;/h2&gt;

&lt;p&gt;Build the project using:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wasm-pack build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This creates a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pkg&lt;/code&gt; directory with the following artifacts:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pkg/
├── package.json
├── README.md
├── wasm_pass.wasm
├── wasm_pass.d.ts
└── wasm_pass.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These files enable npm integration and contain the compiled Web Assembly code.&lt;/p&gt;

&lt;h2 id=&quot;writing-rust-code&quot;&gt;Writing Rust Code&lt;/h2&gt;

&lt;p&gt;Update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cargo.toml&lt;/code&gt; file to include the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rand&lt;/code&gt; crate:&lt;/p&gt;

&lt;div class=&quot;language-toml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[dependencies]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;wasm-bindgen&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0.2.63&quot;&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;rand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0.7.3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;features&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;[&quot;wasm-bindgen&quot;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This adds the random number generation utility to our project. Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cargo build&lt;/code&gt; to download the new dependency.&lt;/p&gt;

&lt;p&gt;Implement the password generator logic in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/lib.rs&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;wasm_bindgen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;prelude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[wasm_bindgen]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;usize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHARSET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;u8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
                            abcdefghijklmnopqrstuvwxyz&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;
                            0123456789)(*&amp;amp;^%$#@!~&quot;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_bytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rng&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;thread_rng&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(|&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rng&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.gen_range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHARSET&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;CHARSET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;char&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;.collect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This function generates a random password of the specified length using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rand&lt;/code&gt; crate.&lt;/p&gt;

&lt;h2 id=&quot;testing-the-code&quot;&gt;Testing the Code&lt;/h2&gt;

&lt;p&gt;Write a test for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;generate&lt;/code&gt; function in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;src/lib.rs&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;#[cfg(test)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;mod&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tests&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;#[test]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;assert_eq!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Run the tests with:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cargo &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--show-output&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ensure the tests pass, confirming the functionality of the password generator.&lt;/p&gt;

&lt;h2 id=&quot;implementing-web-assembly-in-a-react-app&quot;&gt;Implementing Web Assembly in a React App&lt;/h2&gt;

&lt;p&gt;Create a React app in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt; directory:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;app
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;app
&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;src
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/node_modules&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; .gitignore
npm init &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Install necessary dependencies:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--save&lt;/span&gt; react react-dom
npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt; @babel/core @babel/preset-env @babel/preset-react babel-loader webpack webpack-cli webpack-dev-server html-webpack-plugin style-loader css-loader html-loader
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Create the React app files: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.js&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App.js&lt;/code&gt;. Configure Babel with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.babelrc&lt;/code&gt; and Webpack with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;webpack.config.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, run the development server:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;using-the-package-in-react&quot;&gt;Using the Package in React&lt;/h2&gt;

&lt;p&gt;Update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App.js&lt;/code&gt; file to use the Rust-generated Web Assembly package:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setPassword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleChange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;setInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;generatePassword&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;wasm-pass&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;setPassword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;generatePassword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Enter&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/p&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onChange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handleChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;generatePassword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Generate&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Your&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/p&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;strong&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/strong&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This React component allows users to input a password length, click a button, and receive a randomly generated password from the Rust Web Assembly package.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This tutorial showcases the integration of Rust and Web Assembly in a React application, providing a powerful blend of performance and modern front-end technologies. Explore further resources to deepen your understanding of Rust and Web Assembly:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://doc.rust-lang.org/book/&quot;&gt;The Rust Book&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rustwasm.github.io/docs/book/&quot;&gt;Rust and Web Assembly Book&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rustwasm.github.io/docs/wasm-bindgen/introduction.html&quot;&gt;wasm-bindgen Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://wasmbyexample.dev/home.en-us.html&quot;&gt;Wasm By Example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://webassembly.org/&quot;&gt;WebAssembly.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check the &lt;a href=&quot;https://wasm-pass.collinsmuriuki.xyz&quot;&gt;full working implementation&lt;/a&gt; of this project for reference. Happy coding!&lt;/p&gt;</content><author><name>collinsmuriuki</name></author><category term="blog" /><category term="rust" /><category term="wasm" /><category term="react.js" /><category term="javascript" /><summary type="html">Building a Web Assembly-powered Password Generator with Rust and React</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://collinsmuriuki.xyz/assets/images/rust-ferris.jpeg" /><media:content medium="image" url="https://collinsmuriuki.xyz/assets/images/rust-ferris.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Optimizing Node.js Memory Allocation for High-Performance Applications</title><link href="https://collinsmuriuki.xyz/node-memory/" rel="alternate" type="text/html" title="Optimizing Node.js Memory Allocation for High-Performance Applications" /><published>2018-05-23T19:00:00+03:00</published><updated>2018-05-23T19:00:00+03:00</updated><id>https://collinsmuriuki.xyz/node-memory</id><content type="html" xml:base="https://collinsmuriuki.xyz/node-memory/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;If you’re frequently developing and deploying Node.js applications, encountering the infamous &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed&lt;/code&gt; error is not uncommon. This issue arises particularly when your server engages in memory-intensive tasks, such as handling large data transfers with limited system resources.&lt;/p&gt;

&lt;h2 id=&quot;understanding-the-v8-engine&quot;&gt;Understanding the V8 Engine&lt;/h2&gt;

&lt;p&gt;Node.js relies on Google’s V8 engine, an open-source, high-performance JavaScript and WebAssembly engine written in C++. Integrated into both Chrome and Node.js, V8 implements ECMAScript and WebAssembly and caters to various operating systems and processor architectures.&lt;/p&gt;

&lt;p&gt;When a Node.js process begins, V8 allocates a specific amount of memory based on your hardware specifications. Monitoring and managing this allocated memory is crucial, especially when dealing with resource-demanding applications.&lt;/p&gt;

&lt;h2 id=&quot;checking-allocated-memory&quot;&gt;Checking Allocated Memory&lt;/h2&gt;

&lt;p&gt;To gain insights into your process’s allocated memory, create an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.js&lt;/code&gt; script with the following code:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v8&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;v8&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalHeapSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;v8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getHeapStatistics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;total_available_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalHeapSizeInGB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totalHeapSize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toFixed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;`Total Heap Size is &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totalHeapSize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; bytes`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;totalHeapSizeInGB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; GB`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This script utilizes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v8&lt;/code&gt; module, an integral part of Node.js, offering methods like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v8.getHeapStatistics()&lt;/code&gt; to fetch heap-related memory information.&lt;/p&gt;

&lt;h3 id=&quot;adjusting-memory-capacity&quot;&gt;Adjusting Memory Capacity&lt;/h3&gt;

&lt;p&gt;You can increase the memory capacity by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--max-old-space-size&lt;/code&gt; argument when running your script, specifying the desired memory allocation in kilobytes:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node &lt;span class=&quot;nt&quot;&gt;--max-old-space-size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4096 index.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Upon rerunning the script, you should observe an augmented total heap size:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Total Heap Size is 4283117000,   GB 3.99
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this example, the memory has been doubled, providing more breathing room for your processes.&lt;/p&gt;

&lt;h2 id=&quot;important-considerations&quot;&gt;Important Considerations&lt;/h2&gt;

&lt;p&gt;Before adjusting memory allocation, ensure you have sufficient free memory. Attempting to allocate more memory than available on your system is counterproductive.&lt;/p&gt;

&lt;p&gt;Moreover, prioritize refactoring your code for better memory efficiency as a primary strategy before resorting to memory allocation adjustments.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Optimizing memory allocation is a key aspect of maintaining high-performance Node.js applications. By understanding the V8 engine’s role and implementing judicious memory adjustments, you can enhance your application’s stability and responsiveness. Always balance these optimizations with efficient code practices to achieve optimal results.&lt;/p&gt;</content><author><name>collinsmuriuki</name></author><category term="blog" /><category term="node" /><category term="javascript" /><summary type="html">Introduction</summary></entry></feed>